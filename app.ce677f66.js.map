{"version":3,"sources":["static/js/views/abstract-view.js","static/js/views/dashboard.js","static/js/views/posts.js","static/js/views/post-view.js","static/js/views/settings.js","static/js/app.js"],"names":["constructor","params","setTitle","title","document","getHtml","AbstractView","postId","id","pathToRegex","path","RegExp","replace","getParams","match","values","result","slice","keys","Array","from","route","matchAll","map","Object","fromEntries","key","i","navigateTo","url","history","pushState","router","routes","view","Dashboard","Posts","PostView","Settings","location","pathname","find","potentialMatch","querySelector","innerHTML","window","addEventListener","body","e","target","matches","preventDefault","href"],"mappings":"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","file":"app.ce677f66.js","sourceRoot":"../src","sourcesContent":["export default class {\n    constructor(params) {\n        this.params = params;\n    }\n\n    setTitle(title) {\n        document.title = title;\n    }\n\n    async getHtml() {\n        return \"\";\n    }\n}","import AbstractView from \"./abstract-view.js\";\n\nexport default class extends AbstractView {\n    constructor(params) {\n        super(params);\n        this.setTitle(\"Dashboard\");\n    }\n\n    async getHtml() {\n        return `\n            <h1>Welcome back, Dom</h1>\n            <p>\n                Fugiat voluptate et nisi Lorem cillum anim sit do eiusmod occaecat irure do. Reprehenderit anim fugiat sint exercitation consequat. Sit anim laborum sit amet Lorem adipisicing ullamco duis. Anim in do magna ea pariatur et.\n            </p>\n            <p>\n                <a href=\"/posts\" data-link>View recent posts</a>.\n            </p>\n        `;\n    }\n}","import AbstractView from \"./abstract-view.js\";\n\nexport default class extends AbstractView {\n    constructor(params) {\n        super(params);\n        this.setTitle(\"Posts\");\n    }\n\n    async getHtml() {\n        return `\n            <h1>Posts</h1>\n            <p>You are viewing the posts!</p>\n        `;\n    }\n}","import AbstractView from \"./abstract-view.js\";\n\nexport default class extends AbstractView {\n    constructor(params) {\n        super(params);\n        this.postId = params.id;\n        this.setTitle(\"Viewing Post\");\n    }\n\n    async getHtml() {\n        return `\n            <h1>Post</h1>\n            <p>You are viewing post #${this.postId}.</p>\n        `;\n    }\n}","  \nimport AbstractView from \"./abstract-view.js\";\n\nexport default class extends AbstractView {\n    constructor(params) {\n        super(params);\n        this.setTitle(\"Settings\");\n    }\n\n    async getHtml() {\n        return `\n            <h1>Settings</h1>\n            <p>Manage your privacy and configuration.</p>\n        `;\n    }\n}","  \nimport Dashboard from \"./views/dashboard.js\";\nimport Posts from \"./views/posts.js\";\nimport PostView from \"./views/post-view.js\";\nimport Settings from \"./views/settings.js\";\n\nconst pathToRegex = path => new RegExp(\"^\" + path.replace(/\\//g, \"\\\\/\").replace(/:\\w+/g, \"(.+)\") + \"$\");\n\nconst getParams = match => {\n    const values = match.result.slice(1);\n    const keys = Array.from(match.route.path.matchAll(/:(\\w+)/g)).map(result => result[1]);\n\n    return Object.fromEntries(keys.map((key, i) => {\n        return [key, values[i]];\n    }));\n};\n\nconst navigateTo = url => {\n    history.pushState(null, null, url);\n    router();\n};\n\nconst router = async () => {\n    const routes = [\n        { path: \"/\", view: Dashboard },\n        { path: \"/posts\", view: Posts },\n        { path: \"/posts/:id\", view: PostView },\n        { path: \"/settings\", view: Settings }\n    ];\n\n    // Test each route for potential match\n    const potentialMatches = routes.map(route => {\n        return {\n            route: route,\n            result: location.pathname.match(pathToRegex(route.path))\n        };\n    });\n\n    let match = potentialMatches.find(potentialMatch => potentialMatch.result !== null);\n\n    if (!match) {\n        match = {\n            route: routes[0],\n            result: [location.pathname]\n        };\n    }\n\n    const view = new match.route.view(getParams(match));\n\n    document.querySelector(\"#app\").innerHTML = await view.getHtml();\n};\n\nwindow.addEventListener(\"popstate\", router);\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    document.body.addEventListener(\"click\", e => {\n        if (e.target.matches(\"[data-link]\")) {\n            e.preventDefault();\n            navigateTo(e.target.href);\n        }\n    });\n\n    router();\n});"]}